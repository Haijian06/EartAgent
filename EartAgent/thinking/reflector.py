# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from EartAgent.Agent.text_agents import *
from typing import List, Optional, Union
import openai
from openai import OpenAI


class AgentReflector:
    """
    Pass in an instantiated agent. The AgentReflector is used for reflecting and improving the content generated by the agent.
    """

    def __init__(self, agent: Agent):
        self.agent = agent

    def self_reflect(self, reflection_count: int = 1, prompt: Optional[str] = None) -> str:
        """
        Reflect on the content generated by the agent.

        Args:
            reflection_count (int): The number of reflections, default is 1.
            prompt (str, optional): The prompt to guide reflection. If not provided, a default prompt will be used.

        Returns:
            str: The result after reflection.
        """
        content = "\n".join(self.agent.recall())
        if not prompt:
            prompt = f"Please reflect on and improve your previous content: {content}"

        for i in range(reflection_count):
            self.agent(prompt)

        return content

    def reflect(self, reflection_count: int = 1, prompt: Optional[str] = None) -> str:
        """
        Reflect on the content generated by the agent.

        Args:
            reflection_count (int): The number of reflections, default is 1.
            prompt (str, optional): The prompt to guide reflection. If not provided, a default prompt will be used.

        Returns:
            str: The result after reflection.
        """
        content = "\n".join(self.agent.recall())
        if not prompt:
            prompt = f"Please reflect on and improve your previous content: {content}"

        for i in range(reflection_count):
            self.agent(prompt)

        return content




